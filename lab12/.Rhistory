knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("shinydashboard")
require("janitor")
library("palmerpenguins")
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
table(homerange$taxon)
table(homerange$taxon)
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
names(wolves)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
view(wolves)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("pop", "sex"), selected="pop"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="sex", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("AK PEN", "BANJAS","BC","DENALI","ELLES","GTNP","INTAK", selected="pop"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("AK PEN", "BANJAS","BC","DENALI","ELLES","GTNP","INTAK", selected="pop"),
plotOutput("plot", width="600px", height="500px")
))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="sex", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("AK PEN", "BANJAS","BC","DENALI","ELLES","GTNP","INTAK", selected="pop"),
plotOutput("plot", width="600px", height="500px")
))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex" selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex")
plotOutput("plot", width="600px", height="500px")
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex")
plotOutput("plot", width="600px", height="500px")
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex")
plotOutput("plot", width="600px", height="500px")
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select X Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +coord_flip()+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +coord_flip()+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +coord_flip()+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Wolves"),
radioButtons("x", "Select Fill Variable", choices=c("pop","sex"), selected="pop"), selectInput("y", "Select Y Variable", choices = c("sex", "pop"),
selected = "sex"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(wolves, aes_string(x="pop", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +coord_flip()+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")})}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
